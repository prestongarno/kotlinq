/*
 * Copyright (C) 2017 Preston Garno
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
  ext.kotlin_version = '1.2.0'
  ext.clientId = projects.project.name
  ext.mockTestDependencies =
          rootProject.project("kotlinq-core").buildDir.absolutePath + "/test-files"
  ext.sourceCompatibility = 1.8
  ext.projectDescription = "kotlinq: a kotlin client for graphql"
  ext.gitBaseUrl = GIT_BASE_URL + '/kotlinq'
  ext.projLicenseUrl = "$gitBaseUrl/LICENSE.txt"

  repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
  }

  //noinspection GroovyAssignabilityCheck <-- why does this even happen...
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
  }
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'

def getVersion = {
  if (rootProject.hasProperty("release") && rootProject.property("release") == "true") {
    return "0.3.0-RC2"
  } else {
    return "0.3.0-RC2-SNAPSHOT"
  }
}

group = 'com.prestongarno.kotlinq'
version = getVersion()


subprojects.each {
  configurations.all {
    resolutionStrategy {
      eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.jetbrains.kotlin') {
          details.useVersion(kotlin_version)
        }
      }
    }
  }
}

subprojects {

  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'kotlin'
  apply plugin: 'maven-publish'
  apply plugin: "com.jfrog.bintray"
  apply plugin: "com.jfrog.artifactory"

  ext.clientId = project.name
  group 'com.prestongarno.kotlinq'

  version = getVersion(rootProject)


  dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile group: 'com.google.truth', name: 'truth', version: '0.36'
  }

  kotlin {
    experimental {
      coroutines "enable"
    }
  }

  task jarDoc(type: Jar) {
    from(javadoc.destinationDir)
    classifier 'javadoc'
    archiveName "$clientId-$version-${classifier}.jar"
  }

  task jarSource(type: Jar) {
    from(sourceSets.main.allSource)
    from(sourceSets.test.allSource)
    classifier 'sources'
    archiveName = "$clientId-$version-sources.jar"
  }



  artifacts {
    archives jar, jarSource, jarDoc
  }

  bintrayUpload {
    doFirst { println("Uploading module $projects.project.name $version") }
  }


  artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'
    publish {
      repository {
        repoKey = 'oss-snapshot-local'
        username = BINTRAY_USER
        password = JFROG_KEY
      }
      defaults {
        publications('mavenJava')
        publishPom = true
      }
    }
  }

  bintray {
    user BINTRAY_USER
    key BINTRAY_KEY
    publications = ['mavenJava']
    dryRun = rootProject.version.endsWith("SNAPSHOT")
    publish = true
    override = true

    pkg {
      repo = 'kotlinq'
      name = clientId
      desc = projectDescription
      licenses = ['Apache 2.0']
      vcsUrl = "${gitBaseUrl}.git"
      githubRepo = "$gitBaseUrl"
      githubReleaseNotesFile = 'README.md'

      version {
        name = "$projects.project.version"
        gpg {
          sign = true
          passphrase = GMAIL_GPG
        }
        mavenCentralSync {
          sync = false
          user = MAVEN2_USERNAME
          password = MAVEN2_PASSWORD
          close = '0'
        }
      }
    }
  }
}

/* This is so ugly */
task evaluateTestApi(type: GradleBuild) { GradleBuild g ->
  // using old maven plugin for local plugin resolution
  dependsOn(":kotlinq-gradle:install")
  dependsOn(":kotlinq-core:install")

  inputs.files("kotlinq-test-api/build/libs")
  outputs.dirs(mockTestDependencies)
  buildFile = 'kotlinq-test-api/build.gradle'
  //noinspection GroovyAssignabilityCheck
  g.startParameter.projectProperties.put("version", getVersion())
  g.inputs.files("kotlinq-test-api/src")

  //noinspection GroovyAssignabilityCheck
  g.tasks = ['compileGraphQL', 'publishToMavenLocal']
}


subprojects {
  compileTestJava.dependsOn(evaluateTestApi)
  test.dependsOn(evaluateTestApi)
}

clean.doFirst {
  delete 'kotlinq-test-api/src/main/kotlin'
}
