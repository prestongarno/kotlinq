/*
 * Copyright (C) 2017 Preston Garno
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
  ext.kotlin_version = '1.2.0'
  ext.sourceCompatibility = 1.8
  ext.clientId = projects.project.name
  ext.projectDescription = 'a kotlin client for graphql'
  ext.gitBaseUrl = GIT_BASE_URL + '/kotlinq'
  ext.projLicenseUrl = "$gitBaseUrl/LICENSE.txt"
  ext.localStaging = "$buildDir/publish/staging/"
  ext.localBintrayStaging = "$buildDir/bintray/"

  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
  }
}
plugins {
  id "com.jfrog.bintray" version "1.7.3"
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"

def getVersion = { Project project ->
  if (project.hasProperty("release") &&
          project.property("release") == "true") {
    return "0.3"
  } else {
    return "0.3-SNAPSHOT"
  }
}

version = getVersion(rootProject)
group = 'com.prestongarno.kotlinq'

repositories {
  mavenCentral()
  jcenter()
}

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion(kotlin_version)
      }
    }
  }
}

compileKotlin {
  kotlinOptions {
    languageVersion = "1.1"
    apiVersion = "1.1"
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    languageVersion = "1.1"
    apiVersion = "1.1"
    jvmTarget = "1.8"
  }
}

jar {
  from sourceSets.main.output
}

task jarDoc(type: Jar) {
  from(javadoc.destinationDir)
  classifier 'javadoc'
  archiveName "$clientId-$version-${classifier}.jar"
}

task jarSource(type: Jar) {
  from(sourceSets.main.allSource)
  from(sourceSets.test.allSource)
  classifier 'sources'
  archiveName = "$clientId-$version-sources.jar"
}

subprojects.each {

  dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile group: 'com.google.truth', name: 'truth', version: '0.36'
  }

  sourceSets {
    main {
      java {
        srcDirs = ['src/main/kotlin',
                   'src/main/java']
      }
      resources {
        srcDirs = ['src/main/resources']
      }
    }
    test {
      java {
        srcDirs = ['src/test/kotlin',
                   'src/main/java']
      }
      resources {
        srcDirs = ['src/test/resources']
      }
    }
  }

  kotlin {
    experimental {
      coroutines "enable"
    }
  }

  artifacts {
    archives jar
    archives jarSource
    archives jarDoc
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId "$rootProject.group"
      artifactId clientId
      from projects.project.components.java
      artifact jarDoc
      artifact jarSource

      pom.withXml {
        asNode().children().last() + {
          resolveStrategy = Closure.DELEGATE_FIRST
          name clientId
          description projectDescription
          url gitBaseUrl
          organization {
            name DEV_COMPANY
            url DEV_COMPANY_URL
          }
          issueManagement {
            system 'git'
            url "$gitBaseUrl/issues"
          }
          scm {
            url "${gitBaseUrl}.git"
          }
          licenses {
            license {
              name "Apache 2.0"
              url "$projLicenseUrl"
              comments "See $projLicenseUrl for more details."
              distribution "$projLicenseUrl"
            }
          }
          developers {
            developer {
              id DEV_URL
              name DEV_NAME
              organization DEV_COMPANY
              organizationUrl DEV_COMPANY_URL
            }
          }
        }
      }
    }
  }
  repositories {
    maven {
      url localStaging
    }
  }
}

bintrayUpload {
  doFirst { println("Version is $version") }
}

bintray {
  user BINTRAY_USER
  key BINTRAY_KEY
  dryRun = rootProject.version.endsWith("SNAPSHOT")
  publish = dryRun
  override = false

  pkg {
    repo = 'kotlinq'
    name = projects.project.name
    desc = projectDescription
    licenses = ['Apache 2.0']
    vcsUrl = "${gitBaseUrl}.git"
    publications = ['mavenJava']
    githubRepo = "$gitBaseUrl"
    githubReleaseNotesFile = 'README.md'

    version {
      name = "$rootProject.version"
      gpg {
        sign = true
        passphrase = GMAIL_GPG
      }
      mavenCentralSync {
        sync = true
        user = MAVEN2_USERNAME
        password = MAVEN2_PASSWORD
        close = '0'
      }
    }
  }
}

artifactory {
  contextUrl = 'http://oss.jfrog.org/artifactory'
  publish {
    repository {
      repoKey = 'oss-snapshot-local'
      username = BINTRAY_USER
      password = JFROG_KEY
    }
    defaults {
      publications('mavenJava')
      publishPom = true
    }
  }
}
