{
    "docs": [
        {
            "location": "/",
            "text": "KTQ :  \na kotlin library for type-safe GraphQL DSL\n\u00b6\n\n\nAbout\n\u00b6\n\n\nThis project is a \ncompiler\n and \nruntime\n for type-safe DSLs modeling a \nGraphQL\n API.\n\n\nGraphQL is a rigorously tested and thoroughly defined \nspecification\n which defines\nits architecture as structured data which conforms to a simple type system.\n\nGraphQL is a natural way to describe \ndata types\n and their \nrelationships to other types\n\n(also known as a graph, where nodes and edges describe a confined set of data). You can read more\nabout it \nhere\n\n\nKtq has the goal of making GraphQL easy to setup and use while taking advantage of\nthe both pragmatic and type-safe nature of Kotlin. \n\n\nHello, World\n\u00b6\n\n\nThe following example uses the following graphql schema\n\n\ntype Query {\n  hello: String\n}\n\n\n\n\nAfter using the \ngradle plugin\n to create the kotlin types, you can now describe a model\n\n\nval helloQuery = object : QModel(Query) {\n  val hello by model.hello\n}\n\n\n\n\nYou now have a GraphQL Query ready to go!\n\n\nhelloQuery.toGraphQL()\n\n\n\n\nPrints:\n\n  {\n    hello\n  }\n\n\n\nResolve the model\n, by fetching from your endpoint, and then get the results:\n\n\nprintln(helloQuery.hello)\n\n\n\n\nSimple, right? It gets even better!",
            "title": "Intro"
        },
        {
            "location": "/#ktq-a-kotlin-library-for-type-safe-graphql-dsl",
            "text": "",
            "title": "KTQ :  a kotlin library for type-safe GraphQL DSL"
        },
        {
            "location": "/#about",
            "text": "This project is a  compiler  and  runtime  for type-safe DSLs modeling a  GraphQL  API.  GraphQL is a rigorously tested and thoroughly defined  specification  which defines\nits architecture as structured data which conforms to a simple type system. \nGraphQL is a natural way to describe  data types  and their  relationships to other types \n(also known as a graph, where nodes and edges describe a confined set of data). You can read more\nabout it  here  Ktq has the goal of making GraphQL easy to setup and use while taking advantage of\nthe both pragmatic and type-safe nature of Kotlin.",
            "title": "About"
        },
        {
            "location": "/#hello-world",
            "text": "The following example uses the following graphql schema  type Query {\n  hello: String\n}  After using the  gradle plugin  to create the kotlin types, you can now describe a model  val helloQuery = object : QModel(Query) {\n  val hello by model.hello\n}  You now have a GraphQL Query ready to go!  helloQuery.toGraphQL()  Prints:   {\n    hello\n  }  Resolve the model , by fetching from your endpoint, and then get the results:  println(helloQuery.hello)  Simple, right? It gets even better!",
            "title": "Hello, World"
        },
        {
            "location": "/getting-started/",
            "text": "How to objectValue \nktq\n \n\u00b6\n\n\nTo use in a project, add the dependency to a gradle buildscript:\n\n\n  compile 'com.prestongarno.ktq:ktq-client:0.2'\n\n\n\n\n\nMake sure to include the \n gradle plugin \n and read\nthe gradle syntax for configuring compilation of graphql schema SDL as kotlin classes. \n Add this to project buildscript dependencies block:\n\n\n  \nclasspath\n \n'com.prestongarno.ktq:ktq-gradle:0.2'\n\n\n\n\n\n\nAnd apply the plugin:\n\n\n  plugins {\n    id 'com.prestongarno.ktq' version 0.2\n  }\n\n\n\n\n\nAbout\n\u00b6\n\n\nStands for KoTlin Query (language). This is a library which supports concise, type-safe models for \nqueries and mutations against a GraphQl schema. \n\n\nThe \n gradle plugin \n generates an equivalent kotlin type hierarchy which is used to create and execute queries\nand mutations without ever leaving native code.\n\n\nFor an example of how to build models, see the example below created for the Yelp Graphql API. \n\n\nclass\n \nBusinessQuery\n(\nsearchTerm\n: \nString\n)\n \n:\n \nQModel\n(\nQuery\n)\n \n{\n\n\n  \nval\n \nresult\n: \nList\n<\nBusinessNodes\n>\n \nby\n \nmodel\n.\nsearch\n(\n::\nBusinessesNodes\n)\n \n{\n\n      \nconfig\n \n{\n\n        \nterm\n \n=\n \nsearchTerm\n\n        \nlimit\n \n=\n \n10\n\n      \n}\n\n  \n}\n\n\n}\n\n\n\nclass\n \nBusinessesNodes\n : \nQModel\n(\nBusinesses\n)\n \n{\n\n  \nval\n \nresultCount\n: \nInt\n \nby\n \nmodel\n.\ntotal\n\n  \nval\n \nresultsNodes\n: \nList\n<\nBusinessQuery\n>\n \nby\n \nmodel\n.\nbusiness\n.\nquery\n(\n::\nBusinessQuery\n)\n\n\n}\n\n\n\nclass\n \nBusinessQuery\n : \nQModel\n(\nBusiness\n)\n \n{\n\n  \nval\n \nname\n: \nString\n \nby\n \nmodel\n.\nname\n\n  \nval\n \nphoneNumber\n: \nInt\n \nby\n \nmodel\n.\ndisplay_phone\n\n  \nval\n \ndirectUrl\n: \nString\n \nby\n \nmodel\n.\nurl\n\n\n}\n\n\n\n\n\n\nNote that while field types are specified, they are not necessary and can be inferred by the properties\nin the \nmodel\n instance which a concrete query/mutation class delegates its properties to.\n\n\nWhen initializing a \nBusinessQuery\n calling the \n.toGraphql\n()\n results in a valid graphql query as a String:\n\n\nE.g. \nBusinessQuery(\"foobar\").toGraphql()\n returns (formatted by default):\n\n\n{\n search(limit: 10, term: \"foobar\"){\n   total,\n   business {\n     name,\n     display_phone,\n     url \n    }\n  }\n}\n\n\n\n\n\n\n\nWarning\n\n\nDelegated properties should be considered \nuninitialized\n until resolved!\nCall \nmodel.resolved\n (\nBoolean\n property) to figure this out. \nOtherwise, all primitive/scalar types will be set to their default value, and all nullable fields will be null.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#how-to-objectvalue-ktq",
            "text": "To use in a project, add the dependency to a gradle buildscript:    compile 'com.prestongarno.ktq:ktq-client:0.2'  Make sure to include the   gradle plugin   and read\nthe gradle syntax for configuring compilation of graphql schema SDL as kotlin classes. \n Add this to project buildscript dependencies block:     classpath   'com.prestongarno.ktq:ktq-gradle:0.2'   And apply the plugin:    plugins {\n    id 'com.prestongarno.ktq' version 0.2\n  }",
            "title": " How to objectValue ktq "
        },
        {
            "location": "/getting-started/#about",
            "text": "Stands for KoTlin Query (language). This is a library which supports concise, type-safe models for \nqueries and mutations against a GraphQl schema.   The   gradle plugin   generates an equivalent kotlin type hierarchy which is used to create and execute queries\nand mutations without ever leaving native code.  For an example of how to build models, see the example below created for the Yelp Graphql API.   class   BusinessQuery ( searchTerm :  String )   :   QModel ( Query )   { \n\n   val   result :  List < BusinessNodes >   by   model . search ( :: BusinessesNodes )   { \n       config   { \n         term   =   searchTerm \n         limit   =   10 \n       } \n   }  }  class   BusinessesNodes  :  QModel ( Businesses )   { \n   val   resultCount :  Int   by   model . total \n   val   resultsNodes :  List < BusinessQuery >   by   model . business . query ( :: BusinessQuery )  }  class   BusinessQuery  :  QModel ( Business )   { \n   val   name :  String   by   model . name \n   val   phoneNumber :  Int   by   model . display_phone \n   val   directUrl :  String   by   model . url  }   Note that while field types are specified, they are not necessary and can be inferred by the properties\nin the  model  instance which a concrete query/mutation class delegates its properties to.  When initializing a  BusinessQuery  calling the  .toGraphql ()  results in a valid graphql query as a String:  E.g.  BusinessQuery(\"foobar\").toGraphql()  returns (formatted by default):  {\n search(limit: 10, term: \"foobar\"){\n   total,\n   business {\n     name,\n     display_phone,\n     url \n    }\n  }\n}   Warning  Delegated properties should be considered  uninitialized  until resolved!\nCall  model.resolved  ( Boolean  property) to figure this out. \nOtherwise, all primitive/scalar types will be set to their default value, and all nullable fields will be null.",
            "title": "About"
        },
        {
            "location": "/types/paradigms/",
            "text": "Creating a GraphQL Object\n\u00b6\n\n\nThe compiler creates the structure of the GraphQL schema with an object for each type. \nEach field on a type is created as a variable which, depending on the type of GraphQL field, \nis able to provide a \ndelegated property\n \nto any GraphQL model which chooses to include that field in their query.\n\n\nTo create a GraphQL object, subclass the \nQModel\n class, and add as the type argument for the class the \nGraphQL type which you want to use for your model. For example, consider the following schema:\n\n\n    type Person {\n      name: String\n    }\n\n\n\n\nTo make a GraphQL query on this type, here is how you would do it:\n\n\n    object : QModel<Person>(Person)\n\n\n\n\nThats it!\n\n\nAdding fields to your GraphQL models\n\u00b6\n\n\nTo add a field, you will need to add a property to your \nQModel\n object \nwhich delegates to the generated GraphQL object. Here is an example. GraphQL schema:\n\n\n    type Person {\n      name: String\n    }\n\n\n\n\nKotlin code:\n\n\n    object : QModel<Person>(Person) {\n\n      val personName by model.name\n\n    }\n\n\n\n\nNote that this is the same as declaring an actual class like so:\n\n\n    \nclass\n \nPersonModel\n : \nQModel\n<Person>\n(\nPerson\n) {\n\n      \nval\n \npersonName\n \nby\n \nmodel\n.\nname\n\n\n    }\n\n\n\n\nThe property \npersonName\n gets its type information from the \nPerson\n object property delegate provider.\nIn this case, it is of type \nkotlin.String\n. You can also explicitly declare its type like so:\n\n\nval personName: String by model.name\n\n\n\n\n\nDefault values on scalar fields\n\u00b6\n\n\nIf you try to access the \npersonName\n field in the previous section you will throw a \nNullPointerException\n\nsince the query has not been executed! In order to make this avoidable, the library allows you to invoke \nall scalar GraphQL properties and declare default values for the field.\n\n\nTo do this in your model declaration, declare your GraphQL model for \nPerson\n like in the previous sections,\nbut this time adding a code block on the field and assigning a default value to the property:\n\n\n    \nclass\n \nPersonModel\n : \nQModel\n<Person>\n(\nPerson\n) {\n\n      \nval\n \npersonName\n \nby\n \nmodel\n.\nname\n {\n        \ndefault\n = \n\"Me\"\n\n      }\n\n    }\n\n\n\n\nNow, calling \nPersonModel().personName\n returns \n\"Me\"\n!",
            "title": "Paradigms"
        },
        {
            "location": "/types/paradigms/#creating-a-graphql-object",
            "text": "The compiler creates the structure of the GraphQL schema with an object for each type. \nEach field on a type is created as a variable which, depending on the type of GraphQL field, \nis able to provide a  delegated property  \nto any GraphQL model which chooses to include that field in their query.  To create a GraphQL object, subclass the  QModel  class, and add as the type argument for the class the \nGraphQL type which you want to use for your model. For example, consider the following schema:      type Person {\n      name: String\n    }  To make a GraphQL query on this type, here is how you would do it:      object : QModel<Person>(Person)  Thats it!",
            "title": "Creating a GraphQL Object"
        },
        {
            "location": "/types/paradigms/#adding-fields-to-your-graphql-models",
            "text": "To add a field, you will need to add a property to your  QModel  object \nwhich delegates to the generated GraphQL object. Here is an example. GraphQL schema:      type Person {\n      name: String\n    }  Kotlin code:      object : QModel<Person>(Person) {\n\n      val personName by model.name\n\n    }  Note that this is the same as declaring an actual class like so:       class   PersonModel  :  QModel <Person> ( Person ) {\n\n       val   personName   by   model . name \n\n    }  The property  personName  gets its type information from the  Person  object property delegate provider.\nIn this case, it is of type  kotlin.String . You can also explicitly declare its type like so:  val personName: String by model.name",
            "title": "Adding fields to your GraphQL models"
        },
        {
            "location": "/types/paradigms/#default-values-on-scalar-fields",
            "text": "If you try to access the  personName  field in the previous section you will throw a  NullPointerException \nsince the query has not been executed! In order to make this avoidable, the library allows you to invoke \nall scalar GraphQL properties and declare default values for the field.  To do this in your model declaration, declare your GraphQL model for  Person  like in the previous sections,\nbut this time adding a code block on the field and assigning a default value to the property:       class   PersonModel  :  QModel <Person> ( Person ) {\n\n       val   personName   by   model . name  {\n         default  =  \"Me\" \n      }\n\n    }  Now, calling  PersonModel().personName  returns  \"Me\" !",
            "title": "Default values on scalar fields"
        },
        {
            "location": "/types/primitives/",
            "text": "//TODO\n\u00b6",
            "title": "Primitives/Scalars"
        },
        {
            "location": "/types/primitives/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/custom_scalars/",
            "text": "//TODO\n\u00b6",
            "title": "Custom Scalars"
        },
        {
            "location": "/types/custom_scalars/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/objects/",
            "text": "//TODO\n\u00b6",
            "title": "Objects"
        },
        {
            "location": "/types/objects/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/nullables/",
            "text": "//TODO\n\u00b6",
            "title": "Nullables"
        },
        {
            "location": "/types/nullables/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/api/query/",
            "text": "//TODO\n\u00b6",
            "title": "Query"
        },
        {
            "location": "/api/query/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/api/mutation/",
            "text": "//TODO\n\u00b6",
            "title": "Mutation"
        },
        {
            "location": "/api/mutation/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/subscription/",
            "text": "//TODO\n\u00b6",
            "title": "Subscription"
        },
        {
            "location": "/subscription/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/http/",
            "text": "//TODO\n\u00b6",
            "title": "HTTP"
        },
        {
            "location": "/http/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/faq/",
            "text": "Can I use this in production?\n\u00b6\n\n\nPlease don't. The API is still quite rough (as of 0.2.1) and isn't guaranteed to be backwards compatible for a while",
            "title": "FAQ"
        },
        {
            "location": "/faq/#can-i-use-this-in-production",
            "text": "Please don't. The API is still quite rough (as of 0.2.1) and isn't guaranteed to be backwards compatible for a while",
            "title": "Can I use this in production?"
        },
        {
            "location": "/release_notes/",
            "text": "//TODO\n\u00b6",
            "title": "Release notes"
        },
        {
            "location": "/release_notes/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/contributing/",
            "text": "Contributing\n\u00b6\n\n\nInterested in contributing to the Material theme? Want to report a bug? Before\nyou do, please read the following guidelines.\n\n\nSubmission context\n\u00b6\n\n\nGot a question or problem?\n\u00b6\n\n\nFor quick questions there's no need to open an issue as you can reach us on\n\ngitter.im\n.\n\n\nFound a bug?\n\u00b6\n\n\nIf you found a bug in the source code, you can help us by submitting an issue\nto the \nissue tracker\n in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the\n\nsubmission guidelines\n.\n\n\nMissing a feature?\n\u00b6\n\n\nYou can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:\n\n\n\n\n\n\nFor a \nmajor feature\n, first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.\n\n\n\n\n\n\nSmall features and bugs\n can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.\n\n\n\n\n\n\nSubmission guidelines\n\u00b6\n\n\nSubmitting an issue\n\u00b6\n\n\nBefore you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.\n\n\nWe want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.\n\n\nUnfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.\n\n\nSubmitting a Pull Request (PR)\n\u00b6\n\n\nSearch GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.\n\n\n\n\n\n\nDevelopment\n: Fork the project, set up the development environment,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.\n\n\n\n\n\n\nBuild\n: Before submitting a pull requests, build the theme. This is a\n  mandatory requirement for your PR to objectValue accepted, as the theme should at\n  all times be installable through GitHub.\n\n\n\n\n\n\nPull Request\n: After building the theme, commit the compiled output, push\n  your branch to GitHub and send a PR to \nmkdocs-material:master\n. If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.\n\n\n\n\n\n\nAfter your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#contributing",
            "text": "Interested in contributing to the Material theme? Want to report a bug? Before\nyou do, please read the following guidelines.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#submission-context",
            "text": "",
            "title": "Submission context"
        },
        {
            "location": "/contributing/#got-a-question-or-problem",
            "text": "For quick questions there's no need to open an issue as you can reach us on gitter.im .",
            "title": "Got a question or problem?"
        },
        {
            "location": "/contributing/#found-a-bug",
            "text": "If you found a bug in the source code, you can help us by submitting an issue\nto the  issue tracker  in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the submission guidelines .",
            "title": "Found a bug?"
        },
        {
            "location": "/contributing/#missing-a-feature",
            "text": "You can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:    For a  major feature , first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.    Small features and bugs  can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.",
            "title": "Missing a feature?"
        },
        {
            "location": "/contributing/#submission-guidelines",
            "text": "",
            "title": "Submission guidelines"
        },
        {
            "location": "/contributing/#submitting-an-issue",
            "text": "Before you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.  We want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.  Unfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.",
            "title": "Submitting an issue"
        },
        {
            "location": "/contributing/#submitting-a-pull-request-pr",
            "text": "Search GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.    Development : Fork the project, set up the development environment,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.    Build : Before submitting a pull requests, build the theme. This is a\n  mandatory requirement for your PR to objectValue accepted, as the theme should at\n  all times be installable through GitHub.    Pull Request : After building the theme, commit the compiled output, push\n  your branch to GitHub and send a PR to  mkdocs-material:master . If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.    After your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.",
            "title": "Submitting a Pull Request (PR)"
        },
        {
            "location": "/license/",
            "text": "License\n\u00b6\n\n\nMIT License\n\n\nCopyright \u00a9 2016 - 2017 Preston Garno\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "MIT License  Copyright \u00a9 2016 - 2017 Preston Garno  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.",
            "title": "License"
        }
    ]
}