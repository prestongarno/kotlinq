{
    "docs": [
        {
            "location": "/",
            "text": "KTQ :  \na kotlin library for type-safe GraphQL DSL\n\u00b6\n\n\nAbout\n\u00b6\n\n\nThis project is a \ncompiler\n and \nruntime\n for type-safe DSLs modeling a \nGraphQL\n API.\n\n\nGraphQL is a rigorously tested and thoroughly defined \nspecification\n which defines\nits architecture as structured data which conforms to a simple type system.\n\nGraphQL is a natural way to describe \nthings\n and their \nrelationships to other things\n\n(also known as a graph, where nodes and edges describe a confined set of data). You can read more\nabout it \nhere\n\n\nKtq has the goal of making GraphQL easy to setup and use while taking advantage of\nthe both pragmatic and type-safe nature of Kotlin. \n\n\nHello, World\n\u00b6\n\n\nThe following example uses the following graphql schema\n\n\ntype Query {\n  hello: String\n}\n\n\n\n\nAfter using the \ngradle plugin\n to create the kotlin types, you can now describe a model\n\n\nval helloQuery = object : QModel(Query) {\n  val hello by model.hello\n}\n\n\n\n\nResolve the model\n, and then get the results:\n\n\nprintln(helloQuery.hello)\n\n\n\n\nSimple, right? It gets even better.\n\n\n\n\nNote\n\n\nThe paradigms it is built on to model a GraphQL API may seem confusing at first.\nIt utilizes many Kotlin's unique language constructs, and are documented \n\nhere\n if you want to know more.",
            "title": "Intro"
        },
        {
            "location": "/#ktq-a-kotlin-library-for-type-safe-graphql-dsl",
            "text": "",
            "title": "KTQ :  a kotlin library for type-safe GraphQL DSL"
        },
        {
            "location": "/#about",
            "text": "This project is a  compiler  and  runtime  for type-safe DSLs modeling a  GraphQL  API.  GraphQL is a rigorously tested and thoroughly defined  specification  which defines\nits architecture as structured data which conforms to a simple type system. \nGraphQL is a natural way to describe  things  and their  relationships to other things \n(also known as a graph, where nodes and edges describe a confined set of data). You can read more\nabout it  here  Ktq has the goal of making GraphQL easy to setup and use while taking advantage of\nthe both pragmatic and type-safe nature of Kotlin.",
            "title": "About"
        },
        {
            "location": "/#hello-world",
            "text": "The following example uses the following graphql schema  type Query {\n  hello: String\n}  After using the  gradle plugin  to create the kotlin types, you can now describe a model  val helloQuery = object : QModel(Query) {\n  val hello by model.hello\n}  Resolve the model , and then get the results:  println(helloQuery.hello)  Simple, right? It gets even better.   Note  The paradigms it is built on to model a GraphQL API may seem confusing at first.\nIt utilizes many Kotlin's unique language constructs, and are documented  here  if you want to know more.",
            "title": "Hello, World"
        },
        {
            "location": "/getting-started/",
            "text": "Getting started\n\u00b6\n\n\nTODO(\"getting-started\")",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "TODO(\"getting-started\")",
            "title": "Getting started"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Paradigms"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Primitives/Scalars"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Custom Scalars"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Objects"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Nullables"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Query"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Mutation"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Subscription"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "HTTP"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "FAQ"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/types/todo/",
            "text": "//TODO\n\u00b6",
            "title": "Release notes"
        },
        {
            "location": "/types/todo/#todo",
            "text": "",
            "title": "//TODO"
        },
        {
            "location": "/contributing/",
            "text": "Contributing\n\u00b6\n\n\nInterested in contributing to the Material theme? Want to report a bug? Before\nyou do, please read the following guidelines.\n\n\nSubmission context\n\u00b6\n\n\nGot a question or problem?\n\u00b6\n\n\nFor quick questions there's no need to open an issue as you can reach us on\n\ngitter.im\n.\n\n\nFound a bug?\n\u00b6\n\n\nIf you found a bug in the source code, you can help us by submitting an issue\nto the \nissue tracker\n in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the\n\nsubmission guidelines\n.\n\n\nMissing a feature?\n\u00b6\n\n\nYou can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:\n\n\n\n\n\n\nFor a \nmajor feature\n, first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.\n\n\n\n\n\n\nSmall features and bugs\n can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.\n\n\n\n\n\n\nSubmission guidelines\n\u00b6\n\n\nSubmitting an issue\n\u00b6\n\n\nBefore you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.\n\n\nWe want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.\n\n\nUnfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.\n\n\nSubmitting a Pull Request (PR)\n\u00b6\n\n\nSearch GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.\n\n\n\n\n\n\nDevelopment\n: Fork the project, set up the development environment,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.\n\n\n\n\n\n\nBuild\n: Before submitting a pull requests, build the theme. This is a\n  mandatory requirement for your PR to get accepted, as the theme should at\n  all times be installable through GitHub.\n\n\n\n\n\n\nPull Request\n: After building the theme, commit the compiled output, push\n  your branch to GitHub and send a PR to \nmkdocs-material:master\n. If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.\n\n\n\n\n\n\nAfter your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#contributing",
            "text": "Interested in contributing to the Material theme? Want to report a bug? Before\nyou do, please read the following guidelines.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#submission-context",
            "text": "",
            "title": "Submission context"
        },
        {
            "location": "/contributing/#got-a-question-or-problem",
            "text": "For quick questions there's no need to open an issue as you can reach us on gitter.im .",
            "title": "Got a question or problem?"
        },
        {
            "location": "/contributing/#found-a-bug",
            "text": "If you found a bug in the source code, you can help us by submitting an issue\nto the  issue tracker  in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the submission guidelines .",
            "title": "Found a bug?"
        },
        {
            "location": "/contributing/#missing-a-feature",
            "text": "You can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:    For a  major feature , first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.    Small features and bugs  can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.",
            "title": "Missing a feature?"
        },
        {
            "location": "/contributing/#submission-guidelines",
            "text": "",
            "title": "Submission guidelines"
        },
        {
            "location": "/contributing/#submitting-an-issue",
            "text": "Before you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.  We want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.  Unfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.",
            "title": "Submitting an issue"
        },
        {
            "location": "/contributing/#submitting-a-pull-request-pr",
            "text": "Search GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.    Development : Fork the project, set up the development environment,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.    Build : Before submitting a pull requests, build the theme. This is a\n  mandatory requirement for your PR to get accepted, as the theme should at\n  all times be installable through GitHub.    Pull Request : After building the theme, commit the compiled output, push\n  your branch to GitHub and send a PR to  mkdocs-material:master . If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.    After your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.",
            "title": "Submitting a Pull Request (PR)"
        },
        {
            "location": "/license/",
            "text": "License\n\u00b6\n\n\nMIT License\n\n\nCopyright \u00a9 2016 - 2017 Preston Garno\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "MIT License  Copyright \u00a9 2016 - 2017 Preston Garno  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.",
            "title": "License"
        }
    ]
}